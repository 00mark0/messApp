datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      Int                       @id @default(autoincrement())
  username                String                    @unique
  email                   String                    @unique
  password                String
  isAdmin                 Boolean                   @default(false)
  profilePicture          String?
  messagesSent            Message[]                 @relation("messagesSent")
  messagesReceived        Message[]                 @relation("messagesReceived")
  contacts                Contact[]                 @relation("userContacts")
  contactsOf              Contact[]                 @relation("contactUsers")
  notifications           Notification[]
  conversations           ConversationParticipant[]
  contactRequestsSent     ContactRequest[]          @relation("ContactRequestSender")
  contactRequestsReceived ContactRequest[]          @relation("ContactRequestReceiver")
  isOnline                Boolean                   @default(false)
  isVisible               Boolean                   @default(true)
  deletedAt               DateTime?                 // Soft deletion timestamp
  fcmToken               String?  

  messageReactions        MessageReaction[] // Added back-relation
}

model Message {
  id             Int               @id @default(autoincrement())
  sender         User              @relation("messagesSent", fields: [senderId], references: [id])
  senderId       Int
  recipient      User?             @relation("messagesReceived", fields: [recipientId], references: [id])
  recipientId    Int?
  content        String
  mediaUrl       String?
  timestamp      DateTime          @default(now())
  seenBy         Int[]             @default([])
  conversation   Conversation      @relation(fields: [conversationId], references: [id])
  conversationId Int
  reactions      MessageReaction[]

  replyToMessage   Message?   @relation("MessageReplies", fields: [replyToMessageId], references: [id])
  replyToMessageId Int?
  replies          Message[]  @relation("MessageReplies")
}

model MessageReaction {
  id        Int      @id @default(autoincrement())
  message   Message  @relation(fields: [messageId], references: [id])
  messageId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  emoji     String
  createdAt DateTime @default(now())

  @@unique([messageId, userId]) // A user can react once per message
}

model Conversation {
  id           Int                       @id @default(autoincrement())
  name         String?
  avatar       String?
  isGroup      Boolean                   @default(false)
  participants ConversationParticipant[]
  messages     Message[]
  deletedAt    DateTime?
}

model ConversationParticipant {
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  isAdmin        Boolean      @default(false)
  deletedAt      DateTime?

  @@id([conversationId, userId])
}

model Contact {
  id            Int  @id @default(autoincrement())
  user          User @relation("userContacts", fields: [userId], references: [id])
  userId        Int
  contact       User @relation("contactUsers", fields: [contactUserId], references: [id])
  contactUserId Int
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model ContactRequest {
  id         Int      @id @default(autoincrement())
  sender     User     @relation("ContactRequestSender", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("ContactRequestReceiver", fields: [receiverId], references: [id])
  receiverId Int
  status     String   @default("pending") // "pending", "accepted", "rejected"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([senderId, receiverId])
}
